#!/usr/bin/env node
var shelljs = require('shelljs');
var path = require('path');
var log = require('./utils/log');
var config = require('./utils/get-config')();
var GetFiles = require('./utils/get-files');
var PathsExist = require('./utils/paths-exist');
var exorcistHelper = require('./utils/exorcist-helper');
var exec = require('./utils/exec');
var CommanderWrapper = require('./utils/commander-wrapper');
var Watch = require('./utils/watch');
var postcssHelper = require('./utils/postcss-helper');

var program = CommanderWrapper(function(commander) {
  return commander
    .option('-w, --watch', 'incremental rebuild')
    .option('-d, --dist <dist-dir>', 'dir to write output to', path.join(config.dist, 'browser'))
    .arguments('<dir>')
    .action(function(src) {
      this.src = src;
    });
});

if (!program.src) {
  program.src = config.css.src;
}

var files = GetFiles(
  path.join(program.src, 'index.scss'),
  path.join(program.src, 'index.sass')
);

if (!files.length) {
  log.fatal('Source directory ' + program.src + ' does not exist or contains no index.scss/index.sass!');
  process.exit(1);
}

// get the dist file with no extension
var distFile = path.join(program.dist, config.name);

var cmd = [
  'node-sass',
  files[0],
  distFile + '.css',
  '--output-style=compressed',
  '--linefeed=lf',
  '--sourceMap true',
  '--sourceMapContents',
  '--sourceMapEmbed'
];

// node-sass does offer --watch,
// but we don't gain much by using it
// cmd.push('--watch');
var build = function() {
  log.info('Building...');

  ['.css', '.css.map', '.css.min.map', '.css.min'].forEach(function(ext) {
    shelljs.rm('-f', distFile + ext);
  });
  shelljs.mkdir('-p', path.dirname(distFile));

  var sassRetval = exec(cmd, {silent: true});
  if (sassRetval.code !== 0 || !PathsExist(distFile + '.css')) {
    log.fatal('node-sass failed! This is usually due to a syntax error in your scss!');
    process.exit(1);
  }

  postcssHelper({src: distFile + '.css', dist: distFile, noMin: program.watch, noStart: true});
};

if (program.watch) {
  Watch(path.join(program.src, '**', '*.' + path.extname(files[0])), build);
} else {
  build();
}
