#!/usr/bin/env node
var config = require('./utils/get-config')();
var path = require('path');
var PathsExist = require('./utils/paths-exist');
var log = require('./utils/log');
var Run = require('./utils/run');
var glob = require('glob');
var CommanderWrapper = require('./utils/commander-wrapper');

var program = CommanderWrapper(function(commander) {
  return commander
    .option('-w, --watch', 'watch files for changes and re-lint')
    .option('-e, --errors', 'only log errors')
    .option('-f, --fix', 'fix problems automatically')
    .arguments('<glob-or-file...>')
    .action(function(src) {
      this.src = src;
    });
});

if (!program.src) {
  program.src = [path.join(config.docs.src, '**', '*.md')];
}

// make it glob
var files = [];
program.src.forEach(function(src) {
  if (path.extname(src) === '') {
    src = path.join(src, '**', '*.md');
  }

  var f = glob.sync(src);

  // remark hangs if we have no files
  if (f.length === 0) {
    log.fatal('No docs to lint for glob ' + src + '!');
    process.exit(1);
  }
  files.push(src);
});


var command = [
  'remark',
  '--no-stdout', // don't print the file to stdout
  '--rc-path', 'remark-lint.config.js'
].concat(files);

if (program.watch) {
  command.push('--watch');
}

if (program.errors) {
  command.push('--quiet');
}

if (program.fix) {
  command.push('--fix');
}

Run.one(command, {toLog: true, nonFatal: program.watch});
